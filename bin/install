#!/usr/bin/env bash
set -euo pipefail

NODE_IMAGE="node:24"
PROTOC_IMAGE="rvolosatovs/protoc:latest"

if ! command -v docker >/dev/null 2>&1; then
  printf "%bDocker가 설치되어 있지 않습니다. Docker를 먼저 설치하세요.%b\n" "${RED}${BOLD}" "${RESET}" >&2
  exit 1
fi

printf "%bDocker 설치됨:%b %s\n" "${BLUE}${BOLD}" "${RESET}" "$(docker --version)"

if docker compose version >/dev/null 2>&1; then
  printf "%bDocker Compose 설치됨:%b %s\n" "${BLUE}${BOLD}" "${RESET}" "$(docker compose version | head -n 1)"
elif command -v docker-compose >/dev/null 2>&1; then
  printf "%bDocker Compose 설치됨:%b %s\n" "${BLUE}${BOLD}" "${RESET}" "$(docker-compose --version)"
else
  printf "%bDocker Compose가 설치되어 있지 않습니다. Docker Compose를 먼저 설치하세요.%b\n" "${RED}${BOLD}" "${RESET}" >&2
  exit 1
fi

ensure_image() {
  local image="$1"

  if docker image inspect "$image" >/dev/null 2>&1; then
    printf "%b이미지 '%s' 가 이미 존재합니다.%b\n" "${GREEN}${BOLD}" "$image" "${RESET}"
    return
  fi

  local inspect_error
  inspect_error="$(docker image inspect "$image" 2>&1 | head -n 1 || true)"

  if ! docker image inspect "$image" >/dev/null 2>&1; then
    printf "%b이미지 '%s' 가 없습니다. Pull 중...%b\n" "${YELLOW}${BOLD}" "$image" "${RESET}"
    docker pull "$image"
    printf "%b이미지 '%s' 를 성공적으로 가져왔습니다.%b\n" "${GREEN}${BOLD}" "$image" "${RESET}"
  else
    printf "%b이미지 '%s' 가 이미 존재합니다.%b\n" "${GREEN}${BOLD}" "$image" "${RESET}"
  fi
}

ensure_image "$NODE_IMAGE"
ensure_image "$PROTOC_IMAGE"
